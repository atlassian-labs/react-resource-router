// @flow

import type { Node } from 'react';
import type { Action } from 'react-sweet-state';

export type BrowserHistory = any;
export type MemoryHistory = any;
export type History = BrowserHistory | MemoryHistory;

export type LocationShape = any;

export type Location = {|
  pathname: string,
  search: string,
  hash: string,
|};

export type Query = { [string]: string };

export type MatchParams = { [key: string]: string | null | typeof undefined };

export type Match = {|
  /** TODO we are supporting `undefined` here because we are currently using both
   * this version of the `Match` type, and react-routers version (which allows for `undefined`)
   * To fix this we should move `matchPath` to our own util so we can apply our own types, then
   * decide if we want to support undefined types.
   */
  params: MatchParams,
  query: Query,
  isExact: boolean,
  path: string,
  url: string,
|};

export type MatchedInvariantRoute = {|
  route: InvariantRoute,
  match: Match,
|};

export type MatchedRoute = {|
  route: Route,
  match: Match,
|};

export type RouteContext = {|
  location: Location,
  query: Query,
  route: Route,
  match: Match,
  action: HistoryAction,
|};

export type RouteResourceLoading = boolean;
export type RouteResourceTimestamp = number | null;
export type RouteResourceError = Object | Error | null;
// Flow can't narrow optional chaining for RouteResourceResponse.data/RouteResourceResponse.promise
// if the fields are based off RouteResourceData/RouteResourcePromise so we flip the source of truth for these fields
export type RouteResourceData<T> = $PropertyType<
  RouteResourceResponse<T>,
  'data'
>;
export type RouteResourcePromise<T> = $PropertyType<
  RouteResourceResponse<T>,
  'promise'
>;

export type RouteResourceResponse<T> = {|
  loading: RouteResourceLoading,
  error: RouteResourceError,
  data: T | null,
  promise: Promise<T> | null,
  expiresAt: RouteResourceTimestamp,
  key: string,
  accessedAt: RouteResourceTimestamp,
|};

export type ResourceType = string;
export type ResourceKey = string;

type ResourceDependencies = {
  [ResourceType]: RouteResourceResponse<mixed>,
};

export type RouterDataContext = {
  ...RouterContext,
  isPrefetch: boolean,
  dependencies: ResourceDependencies,
};

export type GetKey = (
  routerContext: RouterContext,
  customContext: ResourceStoreContext
) => ResourceKey;

export type GetData<T> = (
  routerContext: RouterDataContext,
  customContext: ResourceStoreContext
) => T | Promise<T>;

export type RouteResourceBase = {|
  type: ResourceType,
  getKey: GetKey,
  maxAge: number,
  maxCache: number,
  isBrowserOnly: boolean,
  depends: ResourceType[] | null,
|};

export type RouteResource<T> = {|
  ...RouteResourceBase,
  getData: GetData<T>,
|};

export type RouteResources = RouteResource<mixed>[];

export type ResourceStoreContext = Object;

type RouteResourceDataForType = {
  [key: string]: RouteResourceResponse<mixed>,
};

export type ResourceOptions = {
  routerContext?: RouterContext,
};

export type RouteResourceUpdater<T> = (
  data: RouteResourceData<T>
) => RouteResourceData<T>;

export type InvariantRoute = {
  path: string,
  exact?: boolean,
  /** Unique name for the route */
  name: string,
  /**
   * Query string matching. Each query param must match for the route to match.
   *
   * A query param can take the following shapes:
   *  * query name only: 'foo' - matches if query name 'foo' is present
   *  * query name matching value: 'foo=bar' - matches if query name 'foo' equals
   *    'bar' exactly
   *  * query name matching regex: 'foo=(bar.+) - matches if query name 'foo' equals
   *    regex '^(bar.+)$'. Note you must escape backslashes and wrap regex in parentheses.
   *  * query name NOT matching value: 'foo!=bar' - matches if query name 'foo' does
   *    not equal bar OR if query name 'foo' does not exist at all
   */
  query?: string[],
};

export type Route = {
  ...InvariantRoute,

  /** The component to render on match, typed explicitly */
  component: React$ComponentType<RouteContext>,
  /**
   * The resources for the route
   */
  resources?: RouteResource<any>[],

  // allow for custom route properties
  [key: string]: any,
  ...
};

export type InvariantRoutes = InvariantRoute[];
export type Routes = Route[];

type ContainerProps = {|
  history: History,
  resourceData?: ResourceStoreData,
  resourceContext?: ResourceStoreContext,
  routes: Routes,
|};

type PublicStateProperties = {|
  action: HistoryAction,
  location: Location,
  match: Match,
  query: Query,
  route: Route,
|};

type PrivateStateProperties = {|
  routes: Routes,
  history: History,
  unlisten: (() => void) | null,
  shouldUseSuspense: boolean,
|};

export type EntireRouterState = {|
  ...PublicStateProperties,
  ...PrivateStateProperties,
|};

type Href = string;

type ToAttributes = {
  params?: MatchParams,
  query?: Query,
};

export type RouterAction = Action<EntireRouterState, ContainerProps, *>;

type UnregisterCallback = () => void;

export type RouterActionsType = {|
  getBasePath: () => string,
  goBack: () => void,
  goForward: () => void,
  push: (path: Href | Location, state?: any) => void,
  pushTo: (route: Route, attributes: ToAttributes) => void,
  registerBlock: (blocker: HistoryBlocker | any) => UnregisterCallback,
  replace: (path: Href | Location, state?: any) => void,
  replaceTo: (route: Route, attributes: ToAttributes) => void,
|};

export type RouterProps = {
  basePath?: string,
  children: Node,
  history: History,
  initialRoute?: Route,
  isGlobal?: boolean,
  onPrefetch?: (routerContext: RouterContext) => void,
  resourceContext?: ResourceStoreContext,
  resourceData?: ResourceStoreData,
  routes: Routes,
};

export type MemoryRouterProps = {
  basePath?: string,
  children: Node,
  location?: string,
  routes?: Routes,
};

export type RequestResourcesParams = {
  history?: BrowserHistory,
  location: string,
  resourceContext?: ResourceStoreContext,
  routes: Routes,
  timeout?: number,
};

export type ResourceStoreData =
  | { [type: string]: RouteResourceDataForType }
  | {||};

export type RouterContext = {|
  route: Route,
  match: Match,
  query: Query,
|};

export type HistoryAction = 'PUSH' | 'REPLACE' | 'POP' | '';

export type HistoryUpdateType = 'push' | 'replace';

export type HistoryBlocker = (
  location: Location,
  action: string
) => boolean | Promise<boolean>;

export type RouterState = PublicStateProperties;

export type RouterActionPush = (
  path: string | LocationShape,
  state?: any
) => void;

export type RouterActionReplace = (
  path: string | LocationShape,
  state?: any
) => void;

export type LinkProps = {
  children: Node,
  target?: '_blank' | '_self' | '_parent' | '_top',
  href?: string,
  prefetch?: false | 'hover' | 'mount',
  to?: string | Route | Promise<{ default: Route, ... }> | Promise<Route>,
  replace?: boolean,
  type?: 'a' | 'button',
  onClick?: (e: any) => void,
  params?: MatchParams,
  query?: Query,
  ...
};

export type RouterSubscriberProps = {|
  children: (state: RouterState, actions: RouterActionsType) => Node,
|};

export type CreateRouterContextOptions = {
  params?: MatchParams,
  query?: Query,
  basePath?: string,
};

export type FindRouterContextOptions = {
  location: Location,
  basePath?: string,
};
