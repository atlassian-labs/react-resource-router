/* eslint-disable no-undef */
/* eslint-disable no-unused-vars */
// @flow
import type { ComponentType, ElementConfig, Node } from 'react';
import type { Action, BoundActions } from 'react-sweet-state';
import type {
  BrowserHistory,
  LocationShape as HistoryLocationShape,
  MemoryHistory,
} from 'history/createBrowserHistory';

import type {
  HistoryAction,
  HistoryBlocker,
  InvariantRoute,
  InvariantRoutes,
  LinkProps,
  Location,
  LocationShape,
  Match,
  MatchedInvariantRoute,
  MatchedRoute,
  MatchParams,
  MemoryRouterProps,
  Navigation,
  NavigationStatics,
  NavigationType,
  Query,
  ResourceStoreContext,
  ResourceStoreData,
  Route,
  RouteContext,
  RouterAction,
  RouterActionPush,
  RouterActionReplace,
  RouterActionsType,
  RouteResource,
  RouteResourceData,
  RouteResourceError,
  RouteResourceResponse,
  RouterProps,
  RouterState,
  RouterContext,
  RouterSubscriberProps,
  Routes,
  StaticRouterProps,
} from './types.js.flow';

declare export function Link(props: LinkProps): Node;
declare export function Redirect(props: {
  to: Location | string,
  push?: boolean,
}): Node;

declare export function RouterActions(props: {|
  children: (actions: BoundActions<RouterActionsType>) => Node,
|}): Node;

declare export function Router(props: RouterProps): Node;
declare export function MemoryRouter(props: MemoryRouterProps): Node;
declare export function StaticRouter(props: StaticRouterProps): Node;

declare export function ResourceSubscriber(props: {
  children: (
    resource: RouteResourceResponse & {
      update: (data: RouteResourceData | null) => void,
      refresh: () => void,
    }
  ) => Node,
  resource: RouteResource,
}): Node;
declare export function RouterSubscriber(props: RouterSubscriberProps): Node;

declare export function RouteResourceEnabledSubscriber(props: {|
  children: (isResourceEnabled: boolean) => Node,
|}): Node;

// hooks

declare export function useResource(
  resource: RouteResource
): [
  {|
    ...RouteResourceResponse,
    update: (data: RouteResourceData | null) => void,
    refresh: () => void,
  |}
];
declare export function useRouter(): [
  RouterState,
  BoundActions<RouterActionsType>
];
declare export function useRouterActions(): BoundActions<RouterActionsType>;
declare export function useResourceStoreContext(): ResourceStoreContext;
declare export function useQueryParam(paramKey: string): [string | void, (qp: string | void) => void];
declare export function usePathParam(paramKey: string): [string | void, (pp: string | void) => void];

// Utils
type WithRouterProps = RouteContext & {|
  history: BrowserHistory,
|};

declare export function withRouter<
  Props: {},
  Component: React$ComponentType<Props>
>(
  WrappedComponent: Component
): React$ComponentType<
  // $FlowFixMe - $Supertype is deprecated https://github.com/flow-typed/flow-typed/issues/2991
  $Diff<React$ElementConfig<$Supertype<Component>>, WithRouterProps>
>;

declare export function matchRoute(
  routes: Routes,
  pathname: string,
  queryParams: MatchParams | string
): MatchedRoute | null;

declare export function matchInvariantRoute(
  routes: InvariantRoutes,
  pathname: string,
  queryParams: MatchParams | string
): MatchedInvariantRoute | null;

declare export function noopRouterDecorator(story: () => Node): Node;

declare export function generatePath(
  pattern: string,
  params?: { [paramName: string]: string | number | boolean | null | void }
): string;

declare export function createLegacyHistory(): BrowserHistory;

declare export function createRouterContext(
  route: Route,
  params?: MatchParams,
  query?: Query
): RouterContext;

declare export function findRouterContext(
  routes: Routes,
  location: Location
): RouterContext;

/**
 * Utility method to created async versions of getData functions
 *
 */
type GetDataLoader = () => Promise</* inexact */ {
  default: $PropertyType<RouteResource, 'getData'>,
}>;

/**
 * Utility method to created type safe resources with defaults.
 *
 */
type CreateResourceArg =
  | {| ...RouteResource, maxAge?: number |}
  | {|
      ...$Diff<
        RouteResource,
        {| getData: $ElementType<RouteResource, 'getData'> |}
      >,
      maxAge?: number,
      getDataLoader: GetDataLoader,
    |};

declare export function createResource(args: CreateResourceArg): RouteResource;

// mocks
declare export var mockRoute: Route;
declare export var mockRouterActions: BoundActions<RouterActionsType>;
declare export var mockRouterContextProp: RouteContext;
declare export var mockRouterStoreContextProp: RouterContext;
