/* eslint-disable no-undef, no-unused-vars */
// @flow
import type { ComponentType, ElementConfig, Node } from 'react';

import type {
  BrowserHistory,
  HistoryUpdateType,
  LinkProps,
  Location,
  MemoryRouterProps,
  ResourceOptions,
  ResourceStoreContext,
  Route,
  RouteContext,
  RouterActionsType,
  RouteResource,
  RouteResourceData,
  RouteResourceResponse,
  RouteResourceUpdater,
  RouterProps,
  RouterState,
  RouterContext,
  RouterSubscriberProps,
  StaticRouterProps,
  CreateRouterContextOptions,
  ResourceStoreData,
  RequestResourcesParams,
} from './types.js.flow';

export * from './utils.js.flow';
export * from './types.js.flow';

declare export function Link(props: LinkProps): Node;
declare export function Redirect(props: {
  to: Location | string,
  push?: boolean,
}): Node;

declare export function RouterActions(props: {|
  children: (actions: RouterActionsType) => Node,
|}): Node;

declare export function Router(props: RouterProps): Node;
declare export var MemoryRouter: {
  (props: MemoryRouterProps): Node,
  requestResources: RequestResourcesParams => Promise<ResourceStoreData>,
};
declare export var StaticRouter: {
  (props: StaticRouterProps): Node,
  requestResources: RequestResourcesParams => Promise<ResourceStoreData>,
};

declare export function ResourceSubscriber<T>(props: {
  children: (
    resource: RouteResourceResponse<T> & {
      update: (getNewData: RouteResourceUpdater<RouteResourceData<T>>) => void,
      refresh: () => void,
    }
  ) => Node,
  resource: RouteResource<T>,
}): Node;
declare export function RouterSubscriber(props: RouterSubscriberProps): Node;

declare export function RouteResourceEnabledSubscriber(props: {|
  children: (isResourceEnabled: boolean) => Node,
|}): Node;

declare export function RouteComponent(): Node;

// hooks

declare export function useResource<T>(
  resource: RouteResource<T>,
  options?: ResourceOptions
): {|
  ...RouteResourceResponse<T>,
  update: (getNewData: RouteResourceUpdater<T>) => void,
  refresh: () => void,
|};
declare export function useRouter(): [RouterState, RouterActionsType];
declare export function useRouterActions(): RouterActionsType;
declare export function useResourceStoreContext(): ResourceStoreContext;
declare export function createRouterSelector<T>(
  selector: (state: RouterState) => T
): () => T;

declare export function useQueryParam(
  paramKey: string
): [
  string | void,
  (newValue: string | void, updateType?: HistoryUpdateType) => void
];
declare export function usePathParam(
  paramKey: string
): [
  string | void,
  (newValue: string | void, updateType?: HistoryUpdateType) => void
];

// Utils
type WithRouterProps = RouteContext & {|
  history: BrowserHistory,
|};

declare export function withRouter<
  Props: { ... },
  Component: ComponentType<Props>
>(
  WrappedComponent: Component
): ComponentType<
  // $FlowFixMe[deprecated-utility] - $Supertype is deprecated https://github.com/flow-typed/flow-typed/issues/2991
  $Diff<ElementConfig<$Supertype<Component>>, WithRouterProps>
>;

declare export function generatePath(
  pattern: string,
  params?: { [paramName: string]: string | number | boolean | null | void }
): string;

declare export function createLegacyHistory(): BrowserHistory;

declare export function createRouterContext(
  route: Route,
  options?: CreateRouterContextOptions
): RouterContext;

/**
 * Utility method to created async versions of getData functions
 *
 */
type GetDataLoader<T> = () => Promise<{
  default: $PropertyType<RouteResource<T>, 'getData'>,
  ...
}>;

/**
 * Utility method to created type safe resources with defaults.
 *
 */
type CreateResourceArg<T> =
  | {| ...RouteResource<T>, maxAge?: number, maxCache?: number |}
  | {|
      ...$Diff<
        RouteResource<T>,
        {| getData: $PropertyType<RouteResource<T>, 'getData'> |}
      >,
      maxAge?: number,
      getDataLoader: GetDataLoader<T>,
      maxCache?: number,
    |};

declare export function createResource<T>(args: CreateResourceArg<T>): RouteResource<T>;
